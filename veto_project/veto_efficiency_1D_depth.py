#!/usr/bin/env python
import argparse
parser = argparse.ArgumentParser(description = "Plot veto efficiency")
parser.add_argument('-d','--debug', default=False, dest = 'BUG')
parser.add_argument('-k','--kinematic', default='vertex_z', dest = 'KIN')
parser.add_argument('-p','--photoelectrons', default='5', type=int, dest = 'PE')
parser.add_argument('-n','--numbermuons', default='1', type=int, dest = 'NUM')
args = parser.parse_args()

from icecube import icetray, dataclasses, dataio
from icecube import phys_services, simclasses, MuonGun
from I3Tray import I3Tray
from icecube.icetray import I3Units
from icecube.MuonGun import load_model, StaticSurfaceInjector, Cylinder, OffsetPowerLaw, BundleConfiguration, BundleEntry

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import numpy as np


def take_ratios(numerator, denominator):
    ratio = list()
    for i in range(len(numerator)):
        if (denominator[i] == 0): n_ratio = 0
        else: n_ratio = numerator[i]/ denominator[i]
        ratio.append(n_ratio)
    return ratio

#load a long list of files
file_name = 'file_list.txt'
file_list = open(file_name).read().splitlines()
infile    = dataio.I3FrameSequence(file_list)
normalizataion  = len(file_list)
print "loaded your MC with " + str(normalizataion) + " files"

#initialize values
m_zenith_1 = []; m_zenith_2 = [];
m_energy_1 = []; m_energy_2 = [];
m_vert_z_1 = []; m_vert_z_2 = [];
m_v5_1 = []; m_v5_1.append([]); m_v5_1.append([]); #[0] is veto, [1] is all
m_v5_2 = []; m_v5_2.append([]); m_v5_2.append([]);
#initialize the loop 
event_count = 1
for frame in infile:
    if(event_count%50000 == 0):
        print "Event: "+ str(event_count)
        if(args.BUG): break
    if ("I3MCTree" in frame) and ("VHESelfVeto_5" in frame):
        event_count += 1
        number_muons = 0;
        muon_z_1 = 0.0; muon_z_2 = 0.0; #zenith
        muon_e_1 = 0.0; muon_e_2 = 0.0; #energy
        muon_w_1 = 0.0; muon_w_2 = 0.0; #weight
        muon_v5_1 = 0.0; muon_v5_2 = 0.0; #pass PE > 5 veto
        muon_z5_1 = 0.0; muon_z5_2 = 0.0; #vertex position
        for particle in frame["I3MCTree"]:
            if particle.type == dataclasses.I3Particle.ParticleType.MuMinus:
                number_muons += 1 #count the muons
                energy = np.log10(particle.energy / I3Units.GeV) #sort by log10 energy
                if  (energy > muon_e_1):
                    muon_z_2 = muon_z_1; muon_z_1 = np.cos(particle.dir.zenith);
                    muon_e_2 = muon_e_1; muon_e_1 = energy;
                    muon_z5_2 = muon_z5_1; muon_z5_1 = frame["VHESelfVetoVertexPos_5"].z;
                    muon_w_2 = muon_w_1; muon_w_1 = frame["MuonWeight"].value/normalizataion;
                    muon_v5_2 = muon_v5_1; muon_v5_1 = (1-int(frame["VHESelfVeto_5"].value)) * muon_w_1;
                elif(energy > muon_e_2):
                    muon_z_2 = np.cos(particle.dir.zenith);
                    muon_e_2 = energy;
                    muon_z5_2 = frame["VHESelfVetoVertexPos_5"].z;
                    muon_w_2 = frame["MuonWeight"].value/normalizataion;
                    muon_v5_2 = (1-int(frame["VHESelfVeto_5"].value)) * muon_w_2;
        #if  (number_muons == 2 and (args.NUM == 2)):
        #m_zenith_1.append(muon_z_1); m_zenith_2.append(muon_z_2);
        if  (number_muons == 1 and args.NUM == 1):
            m_zenith_1.append(muon_z_1);
            m_energy_1.append(muon_e_1);
            m_vert_z_1.append(muon_z5_1);
            m_v5_1[0].append(muon_v5_1); m_v5_1[1].append(muon_w_1);
print "Processed " +str(event_count)+ " events generated by you!"

xbins= 50
xmin = 0; xmax = 0;
x_values = 0
if(args.KIN == 'energy'): 
    x_values = m_energy_1
    xmin = 2; xmax = 6;
if(args.KIN == 'zenith'): 
    x_values = m_zenith_1
    xmin = 0; xmax = 1;
if(args.KIN == 'vertex_z'):
    x_values = m_vert_z_1
    xmin = -800; xmax = 800;
num5_vals = plt.hist(x_values, weights=m_v5_1[0], bins=xbins, range=(xmin,xmax), histtype='step', label='PE > 5')
den_vals = plt.hist(x_values, weights=m_v5_1[1], bins=xbins, range=(xmin,xmax), histtype='step', label='all events')
acceptance5 = take_ratios(num5_vals[0],den_vals[0])
xvals   = den_vals[1][:-1]
#plt.clf()

#plt.plot(xvals, acceptance5, label='PE > 5')
plt.ylabel("Acceptance")
if(args.KIN == 'energy'): 
    plt.xlabel("log10 (E / GeV)")
    plt.legend(loc='upper right')
if(args.KIN == 'zenith'): 
    plt.xlabel("cos (theta)")
    plt.legend(loc='lower right')
if(args.KIN == 'vertex_z'):
    plt.xlabel("VHESelfVetoVertexPos in Z direction (m)")
    plt.legend(loc='upper right')
#plt.show()
plt.savefig("various_depths_"+args.KIN+"_dist_bundle_"+str(args.NUM)+".pdf")
print "Made file: various_depths_" + args.KIN+"_dist_bundle_"+str(args.NUM)+".pdf"
