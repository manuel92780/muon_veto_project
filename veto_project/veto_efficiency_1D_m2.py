#!/usr/bin/env python
import argparse
parser = argparse.ArgumentParser(description = "Plot veto efficiency")
parser.add_argument('-d','--debug', default=False, dest = 'BUG')
parser.add_argument('-r','--ranges', default='high', dest = 'RANGE')

args = parser.parse_args()

from icecube import icetray, dataclasses, dataio
from icecube import phys_services, simclasses, MuonGun
from I3Tray import I3Tray
from icecube.icetray import I3Units
from icecube.MuonGun import load_model, StaticSurfaceInjector, Cylinder, OffsetPowerLaw, BundleConfiguration, BundleEntry

from matplotlib import rc
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import numpy as np
from scipy.optimize import curve_fit

def sigmoid(x, k0, x0, c):
     y = (1-c) / (1 + np.exp(-k0*(np.log10(x)-x0)))+c
     return y

def take_ratios(numerator, denominator):
    ratio = list()
    for i in range(len(numerator)):
        if (denominator[i] == 0): n_ratio = 0
        else: n_ratio = numerator[i]/ denominator[i]
        ratio.append(n_ratio)
    return ratio

#load a long list of files
file_name = 'file_list.txt'
file_list = open(file_name).read().splitlines()
infile    = dataio.I3FrameSequence(file_list)
normalization  = len(file_list)
print "loaded your MC in " + str(normalization) +" files!"

#initialize values
muon_1 = [];
muon_1.append([]);#[0] energy
muon_1.append([]);#[1] z position
muon_1.append([]);#[2] all weights
muon_1.append([]);#[3] passes PE >3 veto
muon_2 = [];
muon_2.append([]);#[0] energy
muon_2.append([]);#[1] z position
muon_2.append([]);#[2] all weights
muon_2.append([]);#[3] passes PE >3 veto


#initialize the loop 
event_count = 1
for frame in infile:
     if(event_count%100000 == 0): 
          print "Event: "+ str(event_count); 
          if(args.BUG): break;
     event_count += 1; 
     if ("EnteringMuon_1" in frame) and ("EnteringMuon_2" not in frame): #count all events with exactly n = 2 muons
          leader_pos = 0; 
          veto_1  = 0; veto_2  = 0; 
          if(frame["EnteringMuon_1"].energy > frame["EnteringMuon_0"].energy): leader_pos = 1;
          leading_muon    = frame["EnteringMuon_"+str(leader_pos)]
          subleading_muon = frame["EnteringMuon_"+str(int(not leader_pos))]
          energy_1 = leading_muon.energy; zpos_1 = leading_muon.pos.z; 
          weight_1 = frame["MuonWeight"].value/normalization #normalized by total files
          energy_2 = subleading_muon.energy; zpos_2 = subleading_muon.pos.z;
          weight_2 = frame["MuonWeight"].value/normalization #normalized by total files
          if("VHESelfVeto_3" in frame):  veto_1  = (int(frame["VHESelfVeto_3"].value) ) * weight_1;
          if("VHESelfVeto_3" in frame):  veto_2  = (int(frame["VHESelfVeto_3"].value) ) * weight_2;
          muon_1[0].append(energy_1); muon_1[1].append(zpos_1); muon_1[2].append(weight_1); muon_1[3].append(veto_1);
          muon_2[0].append(energy_2); muon_2[1].append(zpos_2); muon_2[2].append(weight_2); muon_2[3].append(veto_2); 
          
print "Processed " +str(event_count)+ " events generated by you!"
muon_1_plus_2 =  np.add(muon_1[0],muon_2[0])

xbins= 50
xmin = 1e1; xmax = 1e5; 
if(args.RANGE == "high"): xmin = 1e2;
xbins = np.logspace(np.log10(xmin),np.log10(xmax), xbins)
weight_vals_1, edges_1   = np.histogram(muon_1[0], weights=muon_1[2], bins=xbins, range=(xmin,xmax))
veto_vals_1, _           = np.histogram(muon_1[0], weights=muon_1[3], bins=xbins, range=(xmin,xmax))
acceptance_1  = np.divide(veto_vals_1, weight_vals_1, out=np.zeros_like(veto_vals_1), where=weight_vals_1!=0)
weight_vals_2, edges_2   = np.histogram(muon_2[0], weights=muon_2[2], bins=xbins, range=(xmin,xmax))
veto_vals_2, _           = np.histogram(muon_2[0], weights=muon_2[3], bins=xbins, range=(xmin,xmax))
acceptance_2  = np.divide(veto_vals_2, weight_vals_2, out=np.ones_like(veto_vals_2), where=weight_vals_2!=0)
weight_vals_12, edges_12 = np.histogram(muon_1_plus_2, weights=muon_1[2], bins=xbins, range=(xmin,xmax))
veto_vals_12, _          = np.histogram(muon_1_plus_2, weights=muon_1[3], bins=xbins, range=(xmin,xmax))
acceptance_12  = np.divide(veto_vals_12, weight_vals_12, out=np.zeros_like(veto_vals_12), where=weight_vals_12!=0)
xvals   = edges_1[:-1]

#do fit
x = np.logspace(np.log10(xmin),np.log10(xmax), len(xbins)*10)
popt_1, pcov_1  = curve_fit(sigmoid, xvals, acceptance_1)
y_1  = sigmoid(x, *popt_1)
popt_2, pcov_2  = curve_fit(sigmoid, xvals, acceptance_2)
y_2  = sigmoid(x, *popt_2)
popt_12, pcov_12  = curve_fit(sigmoid, xvals, acceptance_12)
y_12  = sigmoid(x, *popt_12)

#do plotting
plt.semilogx(xvals, acceptance_1,  label='leading muon',  ls='-', color='r')
plt.semilogx(x,y_1,  ls='--', color='r')
plt.semilogx(xvals, acceptance_2,  label='subleading muon',  ls='-', color='b')
plt.semilogx(x,y_2,  ls='--', color='b')
plt.semilogx(xvals, acceptance_12,  label='1st+2nd muon',  ls='-', color='g')
plt.semilogx(x,y_12,  ls='--', color='g')

plt.xlabel("E$_{\mu}$ [GeV]")
plt.legend(loc='lower right')
plt.ylabel('P$_{light}$')
plt.grid(linestyle=':', linewidth=0.5)
plt.ylim(0.0, 1.1)
plt.yticks(np.arange(0, 1.1, 0.1))
#plt.show()
plt.savefig("energy_dist_bundle_2_"+args.RANGE+"_fitrange.pdf")
print "Made file: " + "energy_dist_bundle_2_"+args.RANGE+"_fitrange.pdf"
