#!/usr/bin/env python

import argparse
parser = argparse.ArgumentParser(description = "Plot muons.")
parser.add_argument('-o','--outfile', default='testing', dest = 'OUTFILE')
parser.add_argument('-k','--kin', default='multiplicity', dest = 'KIN')
args = parser.parse_args()

from icecube import icetray, dataclasses, dataio
from icecube import phys_services, simclasses, MuonGun
from I3Tray import I3Tray
from icecube.icetray import I3Units
from icecube.MuonGun import load_model, StaticSurfaceInjector, Cylinder, OffsetPowerLaw, BundleConfiguration, BundleEntry

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import numpy as np

def take_ratios(numerator, denominator):
    ratio = list()
    for i in range(len(numerator)):
        if (denominator[i] == 0): n_ratio = 0
        else: n_ratio = numerator[i]/ denominator[i]
        ratio.append(n_ratio)
    return ratio

#import files
hoe_data_name = 'Hoerandel5_atmod12_SIBYLL_muongun.i3.gz'
hoe_infile    = dataio.I3File(hoe_data_name)
gai_data_name = 'GaisserH4a_atmod12_SIBYLL_muongun.i3.gz'
gai_infile    = dataio.I3File(gai_data_name)
print "loaded your MC"

#run the hoe
h_muon_M        = list()
h_muon_weights  = list()
event_count   = 1
for frame in hoe_infile:
    if(event_count%10000 == 0):
        print "Event: "+ str(event_count)
    if "I3MCTree" in frame:
        event_count = event_count + 1
        number_muons = 0
        first_muon = True
        for particle in frame["I3MCTree"]:
            if particle.type == dataclasses.I3Particle.ParticleType.MuMinus:
                number_muons = number_muons + 1
                if(first_muon): 
                    first_muon = False
                    h_muon_weights.append(frame["MuonWeight"].value)
        h_muon_M.append(number_muons)
print "Processed " +str(event_count)+ " Hoerandel5 events generated by you!"

g_muon_M        = list()
g_muon_weights  = list()
event_count   = 1
for frame in gai_infile:
    if(event_count%10000 == 0):
        print "Event: "+ str(event_count)
    if "I3MCTree" in frame:
        event_count = event_count + 1
        number_muons = 0
        first_muon = True
        for particle in frame["I3MCTree"]:
            if particle.type == dataclasses.I3Particle.ParticleType.MuMinus:
                number_muons = number_muons + 1
                if(first_muon):
                    first_muon = False
                    g_muon_weights.append(frame["MuonWeight"].value)
        g_muon_M.append(number_muons)
print "Processed " +str(event_count)+ " GaisserH4a events generated by you!"

xbins= 50
f, (ax1, ax2) = plt.subplots(2, 1, sharex=True, gridspec_kw = {'height_ratios':[3, 1]})
h_vals = ax1.hist(h_muon_M, weights=h_muon_weights, bins=xbins, range=(0,50), log=True, histtype='step', label='Hoerandel5')
g_vals = ax1.hist(g_muon_M, weights=g_muon_weights, bins=xbins, range=(0,50), log=True, histtype='step', label='GaisserH4a')
ax1.set_ylabel('Rate per Bin [Hz]')
xvals = h_vals[1][:-1]
ratio = take_ratios(h_vals[0],g_vals[0])
ax2.hist(xvals, bins=xbins, weights=ratio, normed=False, log=False, histtype='step')
ax2.set_xlabel('Muon Bundle Multiplicity')
ax2.set_ylabel('Hoe / Gai')
SF = np.sum(h_vals[0])/np.sum(g_vals[0])
ax2.plot([0,50], [SF,SF], 'k--', lw=1, label = 'overall ratio = ' + str("%.2f" % SF))
ax2.yaxis.set_ticks(np.arange(0, 1.6, 0.2))
ax2.set_ylim([0,1.6])
ax1.legend()
ax2.legend()
ax1.grid(linestyle=':', linewidth=1)
ax2.grid(linestyle=':', linewidth=1)

plt.savefig(args.KIN+"_"+args.OUTFILE+".pdf")
#plt.show()
